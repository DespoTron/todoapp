[{"/home/despot/repos/todo-app-v1/src/index.js":"1","/home/despot/repos/todo-app-v1/src/App.js":"2","/home/despot/repos/todo-app-v1/src/components/index.js":"3","/home/despot/repos/todo-app-v1/src/components/TodoList/index.js":"4","/home/despot/repos/todo-app-v1/src/components/TodoForm/index.js":"5","/home/despot/repos/todo-app-v1/src/components/Todo/index.js":"6"},{"size":219,"mtime":1611634443833,"results":"7","hashOfConfig":"8"},{"size":177,"mtime":1611635048351,"results":"9","hashOfConfig":"8"},{"size":142,"mtime":1611636304434,"results":"10","hashOfConfig":"8"},{"size":915,"mtime":1611637370709,"results":"11","hashOfConfig":"8"},{"size":727,"mtime":1611636866890,"results":"12","hashOfConfig":"8"},{"size":887,"mtime":1611638018018,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1r0sd4z",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/despot/repos/todo-app-v1/src/index.js",[],["29","30"],"/home/despot/repos/todo-app-v1/src/App.js",[],"/home/despot/repos/todo-app-v1/src/components/index.js",[],"/home/despot/repos/todo-app-v1/src/components/TodoList/index.js",["31"],"import React, { useState } from 'react';\nimport { TodoForm, Todo } from '../../components';\n\nexport default () => {\n  const [todos, setTodos] = useState([]);\n\n  const addTodo = (todo) => {\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    }\n\n    const newTodos = [todo, ...todos];\n\n    setTodos(newTodos);\n    // console.log(todo, ...todos);\n  };\n\n  const removeTodo = (id) => {\n    const removeArr = [...todos].filter((todo) => todo.id !== id);\n    setTodos(removeArr);\n  };\n\n  const completeTodo = (id) => {\n    let updatedTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n      return todo;\n    });\n\n    setTodos(updatedTodos);\n  };\n\n  return (\n    <div>\n      <h1>What's the Plan for Today?</h1>\n      <TodoForm onSubmit={addTodo} />\n      <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} />\n    </div>\n  );\n};\n","/home/despot/repos/todo-app-v1/src/components/TodoForm/index.js",["32"],"import React, { useState } from 'react';\n\nexport default (props) => {\n  const [input, setInput] = useState('');\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input,\n    });\n\n    setInput('');\n  };\n\n  return (\n    <div>\n      <form className=\"todo__form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Add a todo\"\n          value={input}\n          name=\"text\"\n          className=\"todo__input\"\n          onChange={handleChange}\n        />\n\n        <button className=\"todo__button\">Add Todo</button>\n      </form>\n    </div>\n  );\n};\n","/home/despot/repos/todo-app-v1/src/components/Todo/index.js",["33","34","35","36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":4,"column":1,"nodeType":"43","endLine":41,"endColumn":3},{"ruleId":"41","severity":1,"message":"42","line":3,"column":1,"nodeType":"43","endLine":37,"endColumn":3},{"ruleId":"44","severity":1,"message":"45","line":2,"column":10,"nodeType":"46","messageId":"47","endLine":2,"endColumn":18},{"ruleId":"41","severity":1,"message":"42","line":6,"column":1,"nodeType":"43","endLine":33,"endColumn":3},{"ruleId":"44","severity":1,"message":"48","line":7,"column":10,"nodeType":"46","messageId":"47","endLine":7,"endColumn":14},{"ruleId":"49","severity":1,"message":"50","line":12,"column":34,"nodeType":"51","messageId":"52","endLine":12,"endColumn":36},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'TodoForm' is defined but never used.","Identifier","unusedVar","'edit' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]